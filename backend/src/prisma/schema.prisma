generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  trainer
  user
}

model User {
  userId            Int                     @id @default(autoincrement()) @map("user_id")
  userName          String                  @default("") @map("user_name")
  userMail          String                  @default("") @map("user_mail")
  userAvatar        String?                 @default("") @map("user_avatar")
  password          String                  @default("")
  userGender        String                  @default("") @map("user_gender")
  birthDate         DateTime?               @map("birth_date")
  userRole          UserRole                @map("user_role")
  description       String?                 @default("")
  location          String                  @default("")
  backgraundPicture String                  @default("") @map("backgraund_picture")
  createdAt         DateTime                @default(now()) @map("created_at")
  userBody          UserBody?
  trainerBody       TrainerBody?
  levelOfExperience String                  @default("") @map("level_of_experience")
  typesOfTraning    String[]                @map("types_of_traning")
  feedbacks         Feedback[]
  orders            OrderTraining[]
  personalOrders    PersonalOrderTraining[]

  @@map("users")
}

model UserBody {
  userBodyId              Int                     @id @default(autoincrement()) @map("user_body_id")
  user                    User                    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId                  Int                     @unique @map("user_id")
  timeOfTraining          String                  @default("") @map("time_of_training")
  caloryLosingPlanTotal   String                  @default("") @map("calory_losing_plan_total")
  caloryLosingPlanDiurnal String                  @default("") @map("calory_losing_plan_diurnal")
  readinessForTraining    Boolean                 @default(false) @map("readiness_for_training")
  userbalance             UserBalance[]
  orders                  OrderTraining[]
  personalOrders          PersonalOrderTraining[]

  @@map("user_body")
}

model TrainerBody {
  trainerBodyId       Int           @id @default(autoincrement()) @map("trainer_body_id")
  user                User          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId              Int           @unique @map("user_id")
  sertificate         String        @default("")
  merit               String        @default("")
  readinessForPrivate Boolean       @default(false) @map("readiness_for_private")
  userbalance         UserBalance[]

  @@map("trainer_body")
}

model Training {
  trainingId        Int             @id @default(autoincrement()) @map("training_id")
  title             String          @default("")
  backgroundPicture String          @default("") @map("backgraund_picture")
  levelOfUser       String          @default("") @map("level_of_user")
  typeOfTraining    String          @default("") @map("type_of_training")
  duration          String          @default("")
  price             Int             @default(0)
  caloriesQtt       Int             @default(0) @map("calories_qtt")
  description       String          @default("")
  trainingGender    String          @default("") @map("training_gender")
  video             String          @default("")
  rating            Int             @default(0)
  trainer           Int             @default(0)
  isPromo           Boolean         @default(false) @map("is_promo")
  feedbacks         Feedback[]
  orders            OrderTraining[]

  @@map("training")
}

model UserBalance {
  userBalanceId Int         @id @default(autoincrement()) @map("user_balance_id")
  user          UserBody    @relation(fields: [userBodyId], references: [userBodyId], onDelete: Cascade, onUpdate: Cascade)
  userBodyId    Int         @unique @map("user_body_id")
  training      TrainerBody @relation(fields: [trainerBodyId], references: [trainerBodyId], onDelete: Cascade, onUpdate: Cascade)
  trainerBodyId Int         @unique @map("training_body_id")
  trainingQtt   Int         @map("training_qtt")

  @@map("user_balance")
}

model Feedback {
  feedbackId Int      @id @default(autoincrement()) @map("feedback_id")
  user       User     @relation(fields: [userId], references: [userId])
  userId     Int      @unique @map("user_id")
  training   Training @relation(fields: [trainingId], references: [trainingId])
  trainingId Int      @unique @map("training_id")
  rating     Int      @default(0)
  text       String   @default("")
  createdAt  DateTime @default(now()) @map("created_at")
}

model OrderTraining {
  orderTrainingId    Int       @id @default(autoincrement()) @map("order_traiding_id")
  typeOrder          String    @default("")
  user               User      @relation(fields: [userId], references: [userId])
  userId             Int       @unique @map("user_id")
  training           Training  @relation(fields: [trainingId], references: [trainingId])
  trainingId         Int       @unique @map("training_id")
  price              Int       @default(0)
  qtt                Int       @default(0)
  typeOfPayment      String    @default("")
  createdAt          DateTime  @default(now()) @map("created_at")
  UserBody           UserBody? @relation(fields: [userBodyUserBodyId], references: [userBodyId])
  userBodyUserBodyId Int?
}

model PersonalOrderTraining {
  personalOrderTrainingId Int      @id @default(autoincrement()) @map("personal_order_training_id")
  userBody                UserBody @relation(fields: [userBodyId], references: [userBodyId])
  userBodyId              Int      @unique @map("user_id")
  user                    User     @relation(fields: [userId], references: [userId])
  userId                  Int      @unique @map("trainer_id")
  createdAt               DateTime @default(now()) @map("created_at")
  updateAt                DateTime @default(now()) @map("update_at")
  orderCondition          String
  userUserId              Int
}
