generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  trainer
  client
}

model UserEntity {
  userId            Int                     @id @default(autoincrement()) @map("user_id")
  userName          String                  @default("") @map("user_name")
  userMail          String                  @unique @default("") @map("user_mail")
  userAvatar        String                  @default("") @map("user_avatar")
  passwordHash      String                  @default("")
  userGender        String                  @default("") @map("user_gender")
  birthDate         String                  @default("") @map("birth_date")
  userRole          UserRole                @map("user_role")
  description       String                  @default("")
  location          String                  @default("")
  backgraundPicture String                  @default("") @map("backgraund_picture")
  createdAt         DateTime                @default(now()) @map("created_at")
  clientBody        ClientBody?
  trainerBody       TrainerBody?
  levelOfExperience String                  @default("") @map("level_of_experience")
  typesOfTraning    String[]                @map("types_of_traning")
  orders            OrderTraining[]
  personalOrders    PersonalOrderTraining[]
  userBalance       UserBalance[]
  friends           Int[]

  @@map("users")
}

model ClientBody {
  clientBodyId          Int        @id @default(autoincrement()) @map("user_body_id")
  user                  UserEntity @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId                Int        @unique @map("user_id")
  timeOfTraining        String     @default("") @map("time_of_training")
  caloryLosingPlanTotal Int        @default(0) @map("calory_losing_plan_total")
  caloryLosingPlanDaily Int        @default(0) @map("calory_losing_plan_daily")
  readinessForTraining  Boolean    @default(false) @map("readiness_for_training")

  @@map("client_body")
}

model TrainerBody {
  trainerBodyId       Int        @id @default(autoincrement()) @map("trainer_body_id")
  user                UserEntity @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId              Int        @unique @map("user_id")
  sertificate         String     @default("")
  merit               String     @default("")
  readinessForPrivate Boolean    @default(false) @map("readiness_for_private")

  @@map("trainer_body")
}

model TrainingEntity {
  trainingId        Int        @id @default(autoincrement()) @map("training_id")
  title             String     @default("")
  backgroundPicture String     @default("") @map("backgraund_picture")
  levelOfUser       String     @default("") @map("level_of_user")
  typeOfTraining    String     @default("") @map("type_of_training")
  duration          String     @default("")
  price             Int        @default(0)
  caloriesQtt       Int        @default(0) @map("calories_qtt")
  description       String     @default("")
  trainingGender    String     @default("") @map("training_gender")
  video             String     @default("")
  rating            Int        @default(0)
  trainer           Int        @default(0)
  isPromo           Boolean    @default(false) @map("is_promo")
  feedbacks         Feedback[]

  @@map("training")
}

model UserBalance {
  userBalanceId Int        @id @default(autoincrement()) @map("user_balance_id")
  user          UserEntity @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId        Int        @map("user_id")
  trainingId    Int        @map("training_id")
  trainingQtt   Int        @map("training_qtt")

  @@map("user_balance")
}

model Feedback {
  feedbackId Int            @id @default(autoincrement()) @map("feedback_id")
  userId     Int            @map("user_id")
  training   TrainingEntity @relation(fields: [trainingId], references: [trainingId], onDelete: Cascade, onUpdate: Cascade)
  trainingId Int            @map("training_id")
  rating     Int            @default(0)
  text       String         @default("")
  createdAt  DateTime       @default(now()) @map("created_at")

  @@map("feed_back")
}

model OrderTraining {
  orderTrainingId Int        @id @default(autoincrement()) @map("order_traiding_id")
  user            UserEntity @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId          Int        @map("user_id")
  typeOfOrder     String     @default("")
  trainingId      Int        @map("training_id")
  price           Int        @default(0)
  qtt             Int        @default(0)
  typeOfPayment   String     @default("")
  createdAt       DateTime   @default(now()) @map("created_at")

  @@map("order_training")
}

model PersonalOrderTraining {
  personalOrderTrainingId Int        @id @default(autoincrement()) @map("personal_order_training_id")
  user                    UserEntity @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId                  Int        @map("user_id")
  trainerId               Int        @map("trainer_id")
  createdAt               DateTime   @default(now()) @map("created_at")
  updateAt                DateTime   @default(now()) @map("update_at")
  orderCondition          String
  userUserId              Int

  @@map("personal_order_training")
}

model RefreshToken {
  refreshTokenId Int      @id @default(autoincrement()) @map("refresh_token_id")
  tokenId        String   @map("token_id")
  userId         String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  expiresIn      DateTime @default(now()) @map("expires_in")

  @@map("refresh_token")
}
